// on the terminal: firebase deploy --only functions
import * as functions from 'firebase-functions';
import * as cors from 'cors';
import * as admin from 'firebase-admin';

const corsHandler = cors({origin: true});

admin.initializeApp();

interface GameSession {
  sessionId: string | null;
  players: any[]; // Array of any type for now, define Player interface if needed
  currentTurnIndex: number;
  isGameActive: boolean;
  actionLog: any[]; // Array of any type for now, define Action interface if needed
}

exports.helloWorld = functions.https.onRequest((request, response) => {
  corsHandler(request, response, () => {
    response.send("Hello from Firebase!");
  });
});


exports.createGame = functions.https.onCall((data, context) => {
  const newGame: GameSession = {
    sessionId: null,
    players: [],
    currentTurnIndex: 0,
    isGameActive: false,
    actionLog: []
  };

  return admin.database().ref('app/games').push(newGame)
    .then(snapshot => {
      // After pushing to the database, update the sessionId with the key generated by Firebase
      return admin.database().ref(`app/games/${snapshot.key}`).update({ sessionId: snapshot.key })
        .then(() => {
          return { sessionId: snapshot.key };
        });
    })
    .catch(error => {
      console.error('Error creating game:', error);
      throw new functions.https.HttpsError('unknown', 'Failed to create game', error);
    });
});

exports.joinGame = functions.https.onCall((data, context) => {
  const { userId, deckId, gameId } = data;

  if (!userId || !deckId || !gameId) {
    throw new functions.https.HttpsError('invalid-argument', 'The function must be called with ' +
      'required arguments: userId, deckId, and gameId.');
  }

  const playerData = {
    userId,
    deckId,
    joinedAt: admin.database.ServerValue.TIMESTAMP
  };

  return admin.database().ref(`app/games/${gameId}/players`).push(playerData)
    .then(() => {
      return admin.database().ref(`app/games/${gameId}`).once('value');
    })
    .then(snapshot => {
      const gameSession: GameSession = snapshot.val();
      gameSession.players.push(playerData); // Simulate adding player in server memory
      // Normally you would save back to Firebase here if needed
      return { gameSession };
    })
    .catch(error => {
      console.error('Error joining game:', error);
      throw new functions.https.HttpsError('unknown', 'Failed to join game', error);
    });
});

